// Code generated by mockery v2.38.0. DO NOT EDIT.

package service

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCounter is an autogenerated mock type for the Counter type
type MockCounter struct {
	mock.Mock
}

type MockCounter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCounter) EXPECT() *MockCounter_Expecter {
	return &MockCounter_Expecter{mock: &_m.Mock}
}

// IncGlobal provides a mock function with given fields: _a0
func (_m *MockCounter) IncGlobal(_a0 context.Context) (uint64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for IncGlobal")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (uint64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCounter_IncGlobal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncGlobal'
type MockCounter_IncGlobal_Call struct {
	*mock.Call
}

// IncGlobal is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockCounter_Expecter) IncGlobal(_a0 interface{}) *MockCounter_IncGlobal_Call {
	return &MockCounter_IncGlobal_Call{Call: _e.mock.On("IncGlobal", _a0)}
}

func (_c *MockCounter_IncGlobal_Call) Run(run func(_a0 context.Context)) *MockCounter_IncGlobal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCounter_IncGlobal_Call) Return(_a0 uint64, _a1 error) *MockCounter_IncGlobal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCounter_IncGlobal_Call) RunAndReturn(run func(context.Context) (uint64, error)) *MockCounter_IncGlobal_Call {
	_c.Call.Return(run)
	return _c
}

// IncWord provides a mock function with given fields: _a0, _a1
func (_m *MockCounter) IncWord(_a0 context.Context, _a1 string) (uint64, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for IncWord")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (uint64, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) uint64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCounter_IncWord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncWord'
type MockCounter_IncWord_Call struct {
	*mock.Call
}

// IncWord is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *MockCounter_Expecter) IncWord(_a0 interface{}, _a1 interface{}) *MockCounter_IncWord_Call {
	return &MockCounter_IncWord_Call{Call: _e.mock.On("IncWord", _a0, _a1)}
}

func (_c *MockCounter_IncWord_Call) Run(run func(_a0 context.Context, _a1 string)) *MockCounter_IncWord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockCounter_IncWord_Call) Return(_a0 uint64, _a1 error) *MockCounter_IncWord_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCounter_IncWord_Call) RunAndReturn(run func(context.Context, string) (uint64, error)) *MockCounter_IncWord_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCounter creates a new instance of MockCounter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCounter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCounter {
	mock := &MockCounter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
