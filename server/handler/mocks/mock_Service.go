// Code generated by mockery v2.38.0. DO NOT EDIT.

package handler

import (
	context "context"

	dto "github.com/jonmol/http-skeleton/server/dto"

	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// Healthz provides a mock function with given fields:
func (_m *MockService) Healthz() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Healthz")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Healthz_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Healthz'
type MockService_Healthz_Call struct {
	*mock.Call
}

// Healthz is a helper method to define mock.On call
func (_e *MockService_Expecter) Healthz() *MockService_Healthz_Call {
	return &MockService_Healthz_Call{Call: _e.mock.On("Healthz")}
}

func (_c *MockService_Healthz_Call) Run(run func()) *MockService_Healthz_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Healthz_Call) Return(_a0 error) *MockService_Healthz_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Healthz_Call) RunAndReturn(run func() error) *MockService_Healthz_Call {
	_c.Call.Return(run)
	return _c
}

// Hello provides a mock function with given fields: _a0, _a1
func (_m *MockService) Hello(_a0 context.Context, _a1 dto.InputHello) (*dto.OutputHello, *dto.Meta, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Hello")
	}

	var r0 *dto.OutputHello
	var r1 *dto.Meta
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.InputHello) (*dto.OutputHello, *dto.Meta, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.InputHello) *dto.OutputHello); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.OutputHello)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.InputHello) *dto.Meta); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*dto.Meta)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, dto.InputHello) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockService_Hello_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hello'
type MockService_Hello_Call struct {
	*mock.Call
}

// Hello is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 dto.InputHello
func (_e *MockService_Expecter) Hello(_a0 interface{}, _a1 interface{}) *MockService_Hello_Call {
	return &MockService_Hello_Call{Call: _e.mock.On("Hello", _a0, _a1)}
}

func (_c *MockService_Hello_Call) Run(run func(_a0 context.Context, _a1 dto.InputHello)) *MockService_Hello_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.InputHello))
	})
	return _c
}

func (_c *MockService_Hello_Call) Return(_a0 *dto.OutputHello, _a1 *dto.Meta, _a2 error) *MockService_Hello_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockService_Hello_Call) RunAndReturn(run func(context.Context, dto.InputHello) (*dto.OutputHello, *dto.Meta, error)) *MockService_Hello_Call {
	_c.Call.Return(run)
	return _c
}

// Livez provides a mock function with given fields:
func (_m *MockService) Livez() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Livez")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Livez_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Livez'
type MockService_Livez_Call struct {
	*mock.Call
}

// Livez is a helper method to define mock.On call
func (_e *MockService_Expecter) Livez() *MockService_Livez_Call {
	return &MockService_Livez_Call{Call: _e.mock.On("Livez")}
}

func (_c *MockService_Livez_Call) Run(run func()) *MockService_Livez_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Livez_Call) Return(_a0 error) *MockService_Livez_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Livez_Call) RunAndReturn(run func() error) *MockService_Livez_Call {
	_c.Call.Return(run)
	return _c
}

// Readyz provides a mock function with given fields:
func (_m *MockService) Readyz() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Readyz")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Readyz_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Readyz'
type MockService_Readyz_Call struct {
	*mock.Call
}

// Readyz is a helper method to define mock.On call
func (_e *MockService_Expecter) Readyz() *MockService_Readyz_Call {
	return &MockService_Readyz_Call{Call: _e.mock.On("Readyz")}
}

func (_c *MockService_Readyz_Call) Run(run func()) *MockService_Readyz_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_Readyz_Call) Return(_a0 error) *MockService_Readyz_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Readyz_Call) RunAndReturn(run func() error) *MockService_Readyz_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
